# pip install imaplib email

import imaplib
import email
from email.header import decode_header
import os

# Email account credentials
EMAIL_ACCOUNT = "your_email@example.com"
EMAIL_PASSWORD = "your_password"
IMAP_SERVER = "imap.example.com"

# Folder to save the text files
OUTPUT_FOLDER = "extracted_emails"

# Criteria to search for emails
SEARCH_CRITERIA = "(FROM 'sender@example.com' SUBJECT 'Important')"

# Create the output folder if it doesn't exist
if not os.path.exists(OUTPUT_FOLDER):
    os.makedirs(OUTPUT_FOLDER)

def connect_to_email():
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
    mail.select("inbox")
    return mail

def search_emails(mail, criteria):
    status, messages = mail.search(None, criteria)
    return messages[0].split()

def fetch_email_content(mail, email_id):
    status, msg_data = mail.fetch(email_id, "(RFC822)")
    msg = email.message_from_bytes(msg_data[0][1])
    return msg

def save_email_as_text(msg, output_folder):
    subject, encoding = decode_header(msg["Subject"])[0]
    if isinstance(subject, bytes):
        subject = subject.decode(encoding if encoding else "utf-8")
    
    from_header, encoding = decode_header(msg["From"])[0]
    if isinstance(from_header, bytes):
        from_header = from_header.decode(encoding if encoding else "utf-8")
    
    email_content = f"Subject: {subject}\nFrom: {from_header}\n\n"
    
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            content_disposition = str(part.get("Content-Disposition"))
            
            if "attachment" not in content_disposition:
                try:
                    body = part.get_payload(decode=True).decode()
                    email_content += body
                except:
                    pass
    else:
        body = msg.get_payload(decode=True).decode()
        email_content += body
    
    # Save the email content to a text file
    filename = os.path.join(output_folder, f"{subject}.txt")
    with open(filename, "w", encoding="utf-8") as f:
        f.write(email_content)

def main():
    mail = connect_to_email()
    email_ids = search_emails(mail, SEARCH_CRITERIA)
    
    for e_id in email_ids:
        msg = fetch_email_content(mail, e_id)
        save_email_as_text(msg, OUTPUT_FOLDER)
    
    mail.logout()

if __name__ == "__main__":
    main()

    '''
    Explanation:
Credentials and Setup:

Replace EMAIL_ACCOUNT, EMAIL_PASSWORD, and IMAP_SERVER with your email account details and IMAP server address.

OUTPUT_FOLDER is the directory where the text files will be saved.

SEARCH_CRITERIA is the IMAP search criteria to filter emails (e.g., by sender, subject, etc.).

Functions:

connect_to_email(): Connects to the IMAP server and logs in.

search_emails(): Searches the inbox for emails matching the criteria.

fetch_email_content(): Fetches the content of a specific email.

save_email_as_text(): Saves the email content to a text file in the specified folder.

Main Function:

Connects to the email server, searches for matching emails, fetches their content, and saves them as text files.

Notes:
Ensure that the IMAP server address and search criteria are correctly specified.

The script assumes that the email content is primarily text-based. If the email contains attachments or non-text content, the script will skip those parts.

The script saves each email as a separate text file in the specified output folder.

Security Note:
Storing passwords in plain text within scripts is not secure. Consider using environment variables or a secure vault to manage credentials.

This script should help you automate the process of searching and extracting email content based on specific criteria.

Generated by DeepSeek-V2.5

    '''